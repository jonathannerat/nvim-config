snippet class "PHP Class"
	<?php

	namespace `!l (function()
		local wordtotitle = function (w) local l = w:sub(1,1) if l == l:upper() then return w else return (l:upper() .. w:sub(2)) end end
		local strtotitle = function (s) return vim.iter(vim.split(s, "[-_]")):map(wordtotitle):join("") end
		local file = vim.api.nvim_buf_get_name(0)
		local cwd = vim.uv.cwd() .. "/"
		local relpath = cwd == file:sub(1, #cwd) and file:sub(#cwd+1) or nil
		local components = vim.split(relpath, "/", {plain=true})
		return vim.iter(components):slice(1, #components-1):map(strtotitle):join("\\")
	end)()`;
	
	class `!l (function ()
		local file = vim.fn.expand('%:t')
		local s = ".php"
		return file:sub(-#s) == s and file:sub(1, -#s-1) or nil
	end)()` ${1:extends ${2:BaseClass}}
	{
		$0
	}

# snippet enum "php enum"
# <?php
#
# namespace `!p
# import os
# relpath = path.removeprefix(os.getcwd() + "/")
# dirs = relpath.split("/")[:-1]
# already_title = lambda s: s[0].upper() == s[0]
# snip.rv = "\\".join(map(lambda s: s if already_title(s) else s.title(), dirs))
# `;
#
# enum `!p snip.rv = fn.removesuffix(".php")`${2:: ${1:int}}
# {
# 	case $3 = $4;$0
# }

snippet php "php tag"
	<?php
	
	$0

snippet fun "function"
	${3:${1|public,protected,private|} $2}function ${4:name}($5)${6:: ${7|void,bool,string,array,mixed|}}
	{
		${0:$VISUAL}
	}

snippet afun "anonymous function" i
	function ($1) {
		${0:// code}
	}

snippet fn "anonymous arrow function" i
	fn ($1) => ${0:$VISUAL}
